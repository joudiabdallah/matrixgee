// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ar1_cormatrix_formulated
NumericMatrix ar1_cormatrix_formulated(int param_no, double rho_hat);
RcppExport SEXP _matrixgee_ar1_cormatrix_formulated(SEXP param_noSEXP, SEXP rho_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type param_no(param_noSEXP);
    Rcpp::traits::input_parameter< double >::type rho_hat(rho_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_cormatrix_formulated(param_no, rho_hat));
    return rcpp_result_gen;
END_RCPP
}
// correlation_cols_calc_cpp
NumericMatrix correlation_cols_calc_cpp(NumericVector residuals, int sample_size, int rows_no, int cols_no, int parameters_no, std::string corstr_cols, double dispersion_parameter);
RcppExport SEXP _matrixgee_correlation_cols_calc_cpp(SEXP residualsSEXP, SEXP sample_sizeSEXP, SEXP rows_noSEXP, SEXP cols_noSEXP, SEXP parameters_noSEXP, SEXP corstr_colsSEXP, SEXP dispersion_parameterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rows_no(rows_noSEXP);
    Rcpp::traits::input_parameter< int >::type cols_no(cols_noSEXP);
    Rcpp::traits::input_parameter< int >::type parameters_no(parameters_noSEXP);
    Rcpp::traits::input_parameter< std::string >::type corstr_cols(corstr_colsSEXP);
    Rcpp::traits::input_parameter< double >::type dispersion_parameter(dispersion_parameterSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation_cols_calc_cpp(residuals, sample_size, rows_no, cols_no, parameters_no, corstr_cols, dispersion_parameter));
    return rcpp_result_gen;
END_RCPP
}
// correlation_cols_updated_cpp
NumericMatrix correlation_cols_updated_cpp(NumericVector residuals, int sample_size, int rows_no, int cols_no, int parameters_no, std::string corstr_cols, double dispersion_parameter);
RcppExport SEXP _matrixgee_correlation_cols_updated_cpp(SEXP residualsSEXP, SEXP sample_sizeSEXP, SEXP rows_noSEXP, SEXP cols_noSEXP, SEXP parameters_noSEXP, SEXP corstr_colsSEXP, SEXP dispersion_parameterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rows_no(rows_noSEXP);
    Rcpp::traits::input_parameter< int >::type cols_no(cols_noSEXP);
    Rcpp::traits::input_parameter< int >::type parameters_no(parameters_noSEXP);
    Rcpp::traits::input_parameter< std::string >::type corstr_cols(corstr_colsSEXP);
    Rcpp::traits::input_parameter< double >::type dispersion_parameter(dispersion_parameterSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation_cols_updated_cpp(residuals, sample_size, rows_no, cols_no, parameters_no, corstr_cols, dispersion_parameter));
    return rcpp_result_gen;
END_RCPP
}
// correlation_general
NumericMatrix correlation_general(NumericVector residuals, int sample_size, int rows_no, int cols_no, int parameters_no, std::string corstr, double dispersion_parameter);
RcppExport SEXP _matrixgee_correlation_general(SEXP residualsSEXP, SEXP sample_sizeSEXP, SEXP rows_noSEXP, SEXP cols_noSEXP, SEXP parameters_noSEXP, SEXP corstrSEXP, SEXP dispersion_parameterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rows_no(rows_noSEXP);
    Rcpp::traits::input_parameter< int >::type cols_no(cols_noSEXP);
    Rcpp::traits::input_parameter< int >::type parameters_no(parameters_noSEXP);
    Rcpp::traits::input_parameter< std::string >::type corstr(corstrSEXP);
    Rcpp::traits::input_parameter< double >::type dispersion_parameter(dispersion_parameterSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation_general(residuals, sample_size, rows_no, cols_no, parameters_no, corstr, dispersion_parameter));
    return rcpp_result_gen;
END_RCPP
}
// correlation_general_updated
NumericMatrix correlation_general_updated(NumericVector residuals, int sample_size, int rows_no, int cols_no, int parameters_no, std::string corstr, double dispersion_parameter);
RcppExport SEXP _matrixgee_correlation_general_updated(SEXP residualsSEXP, SEXP sample_sizeSEXP, SEXP rows_noSEXP, SEXP cols_noSEXP, SEXP parameters_noSEXP, SEXP corstrSEXP, SEXP dispersion_parameterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rows_no(rows_noSEXP);
    Rcpp::traits::input_parameter< int >::type cols_no(cols_noSEXP);
    Rcpp::traits::input_parameter< int >::type parameters_no(parameters_noSEXP);
    Rcpp::traits::input_parameter< std::string >::type corstr(corstrSEXP);
    Rcpp::traits::input_parameter< double >::type dispersion_parameter(dispersion_parameterSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation_general_updated(residuals, sample_size, rows_no, cols_no, parameters_no, corstr, dispersion_parameter));
    return rcpp_result_gen;
END_RCPP
}
// correlation_rows_updated_cpp
NumericMatrix correlation_rows_updated_cpp(NumericVector residuals, int sample_size, int rows_no, int cols_no, int parameters_no, std::string corstr_rows, double dispersion);
RcppExport SEXP _matrixgee_correlation_rows_updated_cpp(SEXP residualsSEXP, SEXP sample_sizeSEXP, SEXP rows_noSEXP, SEXP cols_noSEXP, SEXP parameters_noSEXP, SEXP corstr_rowsSEXP, SEXP dispersionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rows_no(rows_noSEXP);
    Rcpp::traits::input_parameter< int >::type cols_no(cols_noSEXP);
    Rcpp::traits::input_parameter< int >::type parameters_no(parameters_noSEXP);
    Rcpp::traits::input_parameter< std::string >::type corstr_rows(corstr_rowsSEXP);
    Rcpp::traits::input_parameter< double >::type dispersion(dispersionSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation_rows_updated_cpp(residuals, sample_size, rows_no, cols_no, parameters_no, corstr_rows, dispersion));
    return rcpp_result_gen;
END_RCPP
}
// get_covariance_matrices_cc
Rcpp::List get_covariance_matrices_cc(const arma::vec& y_vector, const arma::mat& model_matrix, const arma::vec& id_vector, const arma::vec& repeated_vector, const arma::vec& weights_vector, const char * link, const char * family, const arma::vec& mu_vector, const arma::vec& eta_vector, const char * correlation_structure, const arma::vec& alpha_vector, const double& phi);
RcppExport SEXP _matrixgee_get_covariance_matrices_cc(SEXP y_vectorSEXP, SEXP model_matrixSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP weights_vectorSEXP, SEXP linkSEXP, SEXP familySEXP, SEXP mu_vectorSEXP, SEXP eta_vectorSEXP, SEXP correlation_structureSEXP, SEXP alpha_vectorSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_vector(y_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type model_matrix(model_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights_vector(weights_vectorSEXP);
    Rcpp::traits::input_parameter< const char * >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const char * >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_vector(eta_vectorSEXP);
    Rcpp::traits::input_parameter< const char * >::type correlation_structure(correlation_structureSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(get_covariance_matrices_cc(y_vector, model_matrix, id_vector, repeated_vector, weights_vector, link, family, mu_vector, eta_vector, correlation_structure, alpha_vector, phi));
    return rcpp_result_gen;
END_RCPP
}
// covariates_upd
List covariates_upd(SEXP covariates, int sample_size, int rows_no, int cols_no);
RcppExport SEXP _matrixgee_covariates_upd(SEXP covariatesSEXP, SEXP sample_sizeSEXP, SEXP rows_noSEXP, SEXP cols_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rows_no(rows_noSEXP);
    Rcpp::traits::input_parameter< int >::type cols_no(cols_noSEXP);
    rcpp_result_gen = Rcpp::wrap(covariates_upd(covariates, sample_size, rows_no, cols_no));
    return rcpp_result_gen;
END_RCPP
}
// update_beta_gee_cc
arma::vec update_beta_gee_cc(const arma::vec& y_vector, const arma::mat& model_matrix, const arma::vec& id_vector, const arma::vec& repeated_vector, const arma::vec& weights_vector, const char* link, const char* family, const arma::vec& beta_vector, const arma::vec& mu_vector, const arma::vec& eta_vector, const char * correlation_structure, const arma::vec& alpha_vector, const double& phi);
RcppExport SEXP _matrixgee_update_beta_gee_cc(SEXP y_vectorSEXP, SEXP model_matrixSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP weights_vectorSEXP, SEXP linkSEXP, SEXP familySEXP, SEXP beta_vectorSEXP, SEXP mu_vectorSEXP, SEXP eta_vectorSEXP, SEXP correlation_structureSEXP, SEXP alpha_vectorSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_vector(y_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type model_matrix(model_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights_vector(weights_vectorSEXP);
    Rcpp::traits::input_parameter< const char* >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const char* >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_vector(beta_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_vector(eta_vectorSEXP);
    Rcpp::traits::input_parameter< const char * >::type correlation_structure(correlation_structureSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta_gee_cc(y_vector, model_matrix, id_vector, repeated_vector, weights_vector, link, family, beta_vector, mu_vector, eta_vector, correlation_structure, alpha_vector, phi));
    return rcpp_result_gen;
END_RCPP
}
// update_beta_naive_cc
arma::vec update_beta_naive_cc(const arma::vec& y_vector, const arma::mat& model_matrix, const arma::vec& id_vector, const arma::vec& repeated_vector, const arma::vec& weights_vector, const char* link, const char* family, const arma::vec& beta_vector, const arma::vec& mu_vector, const arma::vec& eta_vector, const char * correlation_structure, const arma::vec& alpha_vector, const double& phi);
RcppExport SEXP _matrixgee_update_beta_naive_cc(SEXP y_vectorSEXP, SEXP model_matrixSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP weights_vectorSEXP, SEXP linkSEXP, SEXP familySEXP, SEXP beta_vectorSEXP, SEXP mu_vectorSEXP, SEXP eta_vectorSEXP, SEXP correlation_structureSEXP, SEXP alpha_vectorSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_vector(y_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type model_matrix(model_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights_vector(weights_vectorSEXP);
    Rcpp::traits::input_parameter< const char* >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const char* >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_vector(beta_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_vector(eta_vectorSEXP);
    Rcpp::traits::input_parameter< const char * >::type correlation_structure(correlation_structureSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta_naive_cc(y_vector, model_matrix, id_vector, repeated_vector, weights_vector, link, family, beta_vector, mu_vector, eta_vector, correlation_structure, alpha_vector, phi));
    return rcpp_result_gen;
END_RCPP
}
// update_beta_robust_cc
arma::vec update_beta_robust_cc(const arma::vec& y_vector, const arma::mat& model_matrix, const arma::vec& id_vector, const arma::vec& repeated_vector, const arma::vec& weights_vector, const char* link, const char* family, const arma::vec& beta_vector, const arma::vec& mu_vector, const arma::vec& eta_vector, const char * correlation_structure, const arma::vec& alpha_vector, const double& phi);
RcppExport SEXP _matrixgee_update_beta_robust_cc(SEXP y_vectorSEXP, SEXP model_matrixSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP weights_vectorSEXP, SEXP linkSEXP, SEXP familySEXP, SEXP beta_vectorSEXP, SEXP mu_vectorSEXP, SEXP eta_vectorSEXP, SEXP correlation_structureSEXP, SEXP alpha_vectorSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_vector(y_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type model_matrix(model_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights_vector(weights_vectorSEXP);
    Rcpp::traits::input_parameter< const char* >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const char* >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_vector(beta_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_vector(eta_vectorSEXP);
    Rcpp::traits::input_parameter< const char * >::type correlation_structure(correlation_structureSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta_robust_cc(y_vector, model_matrix, id_vector, repeated_vector, weights_vector, link, family, beta_vector, mu_vector, eta_vector, correlation_structure, alpha_vector, phi));
    return rcpp_result_gen;
END_RCPP
}
// update_beta_empirical_cc
arma::vec update_beta_empirical_cc(const arma::vec& y_vector, const arma::mat& model_matrix, const arma::vec& id_vector, const arma::vec& repeated_vector, const arma::vec& weights_vector, const char* link, const char* family, const arma::vec& beta_vector, const arma::vec& mu_vector, const arma::vec& eta_vector, const char * correlation_structure, const arma::vec& alpha_vector, const double& phi);
RcppExport SEXP _matrixgee_update_beta_empirical_cc(SEXP y_vectorSEXP, SEXP model_matrixSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP weights_vectorSEXP, SEXP linkSEXP, SEXP familySEXP, SEXP beta_vectorSEXP, SEXP mu_vectorSEXP, SEXP eta_vectorSEXP, SEXP correlation_structureSEXP, SEXP alpha_vectorSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_vector(y_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type model_matrix(model_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights_vector(weights_vectorSEXP);
    Rcpp::traits::input_parameter< const char* >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const char* >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_vector(beta_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_vector(eta_vectorSEXP);
    Rcpp::traits::input_parameter< const char * >::type correlation_structure(correlation_structureSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta_empirical_cc(y_vector, model_matrix, id_vector, repeated_vector, weights_vector, link, family, beta_vector, mu_vector, eta_vector, correlation_structure, alpha_vector, phi));
    return rcpp_result_gen;
END_RCPP
}
// update_beta_jeffreys_cc
arma::vec update_beta_jeffreys_cc(const arma::vec& y_vector, const arma::mat& model_matrix, const arma::vec& id_vector, const arma::vec& repeated_vector, const arma::vec& weights_vector, const char* link, const char* family, const arma::vec& beta_vector, const arma::vec& mu_vector, const arma::vec& eta_vector, const char * correlation_structure, const arma::vec& alpha_vector, const double& phi, const double& jeffreys_power);
RcppExport SEXP _matrixgee_update_beta_jeffreys_cc(SEXP y_vectorSEXP, SEXP model_matrixSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP weights_vectorSEXP, SEXP linkSEXP, SEXP familySEXP, SEXP beta_vectorSEXP, SEXP mu_vectorSEXP, SEXP eta_vectorSEXP, SEXP correlation_structureSEXP, SEXP alpha_vectorSEXP, SEXP phiSEXP, SEXP jeffreys_powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_vector(y_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type model_matrix(model_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights_vector(weights_vectorSEXP);
    Rcpp::traits::input_parameter< const char* >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const char* >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_vector(beta_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_vector(eta_vectorSEXP);
    Rcpp::traits::input_parameter< const char * >::type correlation_structure(correlation_structureSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type jeffreys_power(jeffreys_powerSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta_jeffreys_cc(y_vector, model_matrix, id_vector, repeated_vector, weights_vector, link, family, beta_vector, mu_vector, eta_vector, correlation_structure, alpha_vector, phi, jeffreys_power));
    return rcpp_result_gen;
END_RCPP
}
// update_beta_cc
arma::vec update_beta_cc(const arma::vec& y_vector, const arma::mat& model_matrix, const arma::vec& id_vector, const arma::vec& repeated_vector, const arma::vec& weights_vector, const char* link, const char* family, const arma::vec& beta_vector, const arma::vec& mu_vector, const arma::vec& eta_vector, const char * correlation_structure, const arma::vec& alpha_vector, const double& phi, const double& jeffreys_power, const char* method);
RcppExport SEXP _matrixgee_update_beta_cc(SEXP y_vectorSEXP, SEXP model_matrixSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP weights_vectorSEXP, SEXP linkSEXP, SEXP familySEXP, SEXP beta_vectorSEXP, SEXP mu_vectorSEXP, SEXP eta_vectorSEXP, SEXP correlation_structureSEXP, SEXP alpha_vectorSEXP, SEXP phiSEXP, SEXP jeffreys_powerSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_vector(y_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type model_matrix(model_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights_vector(weights_vectorSEXP);
    Rcpp::traits::input_parameter< const char* >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const char* >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_vector(beta_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_vector(eta_vectorSEXP);
    Rcpp::traits::input_parameter< const char * >::type correlation_structure(correlation_structureSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type jeffreys_power(jeffreys_powerSEXP);
    Rcpp::traits::input_parameter< const char* >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta_cc(y_vector, model_matrix, id_vector, repeated_vector, weights_vector, link, family, beta_vector, mu_vector, eta_vector, correlation_structure, alpha_vector, phi, jeffreys_power, method));
    return rcpp_result_gen;
END_RCPP
}
// fit_geesolver_cc
Rcpp::List fit_geesolver_cc(const arma::vec& y_vector, const arma::mat& model_matrix, const arma::vec& id_vector, const arma::vec& repeated_vector, const arma::vec& weights_vector, const char * link, const char * family, arma::vec beta_vector, const arma::vec& offset, const int& maxiter, const double& tolerance, const int& step_maxiter, const int& step_multiplier, const double& jeffreys_power, const char * method, int use_params, arma::vec alpha_vector, const int& alpha_fixed, const char * correlation_structure, const int& mdependence, double phi, const int& phi_fixed);
RcppExport SEXP _matrixgee_fit_geesolver_cc(SEXP y_vectorSEXP, SEXP model_matrixSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP weights_vectorSEXP, SEXP linkSEXP, SEXP familySEXP, SEXP beta_vectorSEXP, SEXP offsetSEXP, SEXP maxiterSEXP, SEXP toleranceSEXP, SEXP step_maxiterSEXP, SEXP step_multiplierSEXP, SEXP jeffreys_powerSEXP, SEXP methodSEXP, SEXP use_paramsSEXP, SEXP alpha_vectorSEXP, SEXP alpha_fixedSEXP, SEXP correlation_structureSEXP, SEXP mdependenceSEXP, SEXP phiSEXP, SEXP phi_fixedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_vector(y_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type model_matrix(model_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights_vector(weights_vectorSEXP);
    Rcpp::traits::input_parameter< const char * >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const char * >::type family(familySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_vector(beta_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double& >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< const int& >::type step_maxiter(step_maxiterSEXP);
    Rcpp::traits::input_parameter< const int& >::type step_multiplier(step_multiplierSEXP);
    Rcpp::traits::input_parameter< const double& >::type jeffreys_power(jeffreys_powerSEXP);
    Rcpp::traits::input_parameter< const char * >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type use_params(use_paramsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const int& >::type alpha_fixed(alpha_fixedSEXP);
    Rcpp::traits::input_parameter< const char * >::type correlation_structure(correlation_structureSEXP);
    Rcpp::traits::input_parameter< const int& >::type mdependence(mdependenceSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const int& >::type phi_fixed(phi_fixedSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_geesolver_cc(y_vector, model_matrix, id_vector, repeated_vector, weights_vector, link, family, beta_vector, offset, maxiter, tolerance, step_maxiter, step_multiplier, jeffreys_power, method, use_params, alpha_vector, alpha_fixed, correlation_structure, mdependence, phi, phi_fixed));
    return rcpp_result_gen;
END_RCPP
}
// get_naive_matrix_inverse_independence
arma::mat get_naive_matrix_inverse_independence(const arma::vec& y_vector, const arma::mat& model_matrix, const arma::vec& id_vector, const char* link, const char* family, const arma::vec& mu_vector, const arma::vec& eta_vector, const double& phi);
RcppExport SEXP _matrixgee_get_naive_matrix_inverse_independence(SEXP y_vectorSEXP, SEXP model_matrixSEXP, SEXP id_vectorSEXP, SEXP linkSEXP, SEXP familySEXP, SEXP mu_vectorSEXP, SEXP eta_vectorSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_vector(y_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type model_matrix(model_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const char* >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const char* >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_vector(eta_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(get_naive_matrix_inverse_independence(y_vector, model_matrix, id_vector, link, family, mu_vector, eta_vector, phi));
    return rcpp_result_gen;
END_RCPP
}
// get_gee_criteria_sc_cw
Rcpp::List get_gee_criteria_sc_cw(const arma::vec& y_vector, const arma::vec& id_vector, const arma::vec& repeated_vector, const char * family, const arma::vec& mu_vector, const char * correlation_structure, const arma::vec& alpha_vector, const double& phi, const arma::vec& weights_vector);
RcppExport SEXP _matrixgee_get_gee_criteria_sc_cw(SEXP y_vectorSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP familySEXP, SEXP mu_vectorSEXP, SEXP correlation_structureSEXP, SEXP alpha_vectorSEXP, SEXP phiSEXP, SEXP weights_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_vector(y_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const char * >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    Rcpp::traits::input_parameter< const char * >::type correlation_structure(correlation_structureSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights_vector(weights_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_gee_criteria_sc_cw(y_vector, id_vector, repeated_vector, family, mu_vector, correlation_structure, alpha_vector, phi, weights_vector));
    return rcpp_result_gen;
END_RCPP
}
// matrix_to_long_dataframe_cpp
DataFrame matrix_to_long_dataframe_cpp(NumericMatrix data, int sample_size, int rows_no, int cols_no);
RcppExport SEXP _matrixgee_matrix_to_long_dataframe_cpp(SEXP dataSEXP, SEXP sample_sizeSEXP, SEXP rows_noSEXP, SEXP cols_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rows_no(rows_noSEXP);
    Rcpp::traits::input_parameter< int >::type cols_no(cols_noSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_to_long_dataframe_cpp(data, sample_size, rows_no, cols_no));
    return rcpp_result_gen;
END_RCPP
}
// vector_to_long_dataframe_cpp
DataFrame vector_to_long_dataframe_cpp(NumericMatrix data, int sample_size, int rows_no, int cols_no);
RcppExport SEXP _matrixgee_vector_to_long_dataframe_cpp(SEXP dataSEXP, SEXP sample_sizeSEXP, SEXP rows_noSEXP, SEXP cols_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rows_no(rows_noSEXP);
    Rcpp::traits::input_parameter< int >::type cols_no(cols_noSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_to_long_dataframe_cpp(data, sample_size, rows_no, cols_no));
    return rcpp_result_gen;
END_RCPP
}
// arma2vec
Rcpp::NumericVector arma2vec(const arma::vec& x);
RcppExport SEXP _matrixgee_arma2vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(arma2vec(x));
    return rcpp_result_gen;
END_RCPP
}
// vec2arma
arma::vec vec2arma(const Rcpp::NumericVector& x);
RcppExport SEXP _matrixgee_vec2arma(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2arma(x));
    return rcpp_result_gen;
END_RCPP
}
// linkfun_rcpp
Rcpp::NumericVector linkfun_rcpp(const char * link, const Rcpp::NumericVector& mu_vector);
RcppExport SEXP _matrixgee_linkfun_rcpp(SEXP linkSEXP, SEXP mu_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type mu_vector(mu_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(linkfun_rcpp(link, mu_vector));
    return rcpp_result_gen;
END_RCPP
}
// linkfun
arma::vec linkfun(const char * link, const arma::vec& mu_vector);
RcppExport SEXP _matrixgee_linkfun(SEXP linkSEXP, SEXP mu_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(linkfun(link, mu_vector));
    return rcpp_result_gen;
END_RCPP
}
// linkinv_rcpp
Rcpp::NumericVector linkinv_rcpp(const char * link, const Rcpp::NumericVector& eta_vector);
RcppExport SEXP _matrixgee_linkinv_rcpp(SEXP linkSEXP, SEXP eta_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type eta_vector(eta_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(linkinv_rcpp(link, eta_vector));
    return rcpp_result_gen;
END_RCPP
}
// linkinv
arma::vec linkinv(const char * link, const Rcpp::NumericVector& eta_vector);
RcppExport SEXP _matrixgee_linkinv(SEXP linkSEXP, SEXP eta_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type eta_vector(eta_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(linkinv(link, eta_vector));
    return rcpp_result_gen;
END_RCPP
}
// mueta_rcpp
Rcpp::NumericVector mueta_rcpp(const char * link, const Rcpp::NumericVector& eta_vector);
RcppExport SEXP _matrixgee_mueta_rcpp(SEXP linkSEXP, SEXP eta_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type eta_vector(eta_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(mueta_rcpp(link, eta_vector));
    return rcpp_result_gen;
END_RCPP
}
// mueta
arma::vec mueta(const char * link, const arma::vec& eta_vector);
RcppExport SEXP _matrixgee_mueta(SEXP linkSEXP, SEXP eta_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_vector(eta_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(mueta(link, eta_vector));
    return rcpp_result_gen;
END_RCPP
}
// mueta2_rcpp
Rcpp::NumericVector mueta2_rcpp(const char * link, const Rcpp::NumericVector& eta_vector);
RcppExport SEXP _matrixgee_mueta2_rcpp(SEXP linkSEXP, SEXP eta_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type eta_vector(eta_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(mueta2_rcpp(link, eta_vector));
    return rcpp_result_gen;
END_RCPP
}
// mueta2
arma::vec mueta2(const char * link, const arma::vec& eta_vector);
RcppExport SEXP _matrixgee_mueta2(SEXP linkSEXP, SEXP eta_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_vector(eta_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(mueta2(link, eta_vector));
    return rcpp_result_gen;
END_RCPP
}
// mueta3_rcpp
Rcpp::NumericVector mueta3_rcpp(const char * link, const Rcpp::NumericVector& eta_vector);
RcppExport SEXP _matrixgee_mueta3_rcpp(SEXP linkSEXP, SEXP eta_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type eta_vector(eta_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(mueta3_rcpp(link, eta_vector));
    return rcpp_result_gen;
END_RCPP
}
// mueta3
arma::vec mueta3(const char * link, const arma::vec& eta_vector);
RcppExport SEXP _matrixgee_mueta3(SEXP linkSEXP, SEXP eta_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_vector(eta_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(mueta3(link, eta_vector));
    return rcpp_result_gen;
END_RCPP
}
// valideta
Rcpp::LogicalVector valideta(const char * link, const Rcpp::NumericVector& eta_vector);
RcppExport SEXP _matrixgee_valideta(SEXP linkSEXP, SEXP eta_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type eta_vector(eta_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(valideta(link, eta_vector));
    return rcpp_result_gen;
END_RCPP
}
// validmu
Rcpp::LogicalVector validmu(const char * family, const Rcpp::NumericVector& mu_vector);
RcppExport SEXP _matrixgee_validmu(SEXP familySEXP, SEXP mu_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type family(familySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type mu_vector(mu_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(validmu(family, mu_vector));
    return rcpp_result_gen;
END_RCPP
}
// matrixgee_cpp
List matrixgee_cpp(NumericMatrix data, SEXP covariates, std::string intercept, int sample_size, int rows_no, int cols_no, int max_iter, double tol, std::string corstr_rows, std::string corstr_cols);
RcppExport SEXP _matrixgee_matrixgee_cpp(SEXP dataSEXP, SEXP covariatesSEXP, SEXP interceptSEXP, SEXP sample_sizeSEXP, SEXP rows_noSEXP, SEXP cols_noSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP corstr_rowsSEXP, SEXP corstr_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< std::string >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rows_no(rows_noSEXP);
    Rcpp::traits::input_parameter< int >::type cols_no(cols_noSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< std::string >::type corstr_rows(corstr_rowsSEXP);
    Rcpp::traits::input_parameter< std::string >::type corstr_cols(corstr_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixgee_cpp(data, covariates, intercept, sample_size, rows_no, cols_no, max_iter, tol, corstr_rows, corstr_cols));
    return rcpp_result_gen;
END_RCPP
}
// matrixgee_cpp_nokron
List matrixgee_cpp_nokron(NumericMatrix data, SEXP covariates, std::string intercept, int sample_size, int rows_no, int cols_no, int max_iter, double tol, std::string corstr);
RcppExport SEXP _matrixgee_matrixgee_cpp_nokron(SEXP dataSEXP, SEXP covariatesSEXP, SEXP interceptSEXP, SEXP sample_sizeSEXP, SEXP rows_noSEXP, SEXP cols_noSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP corstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< std::string >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rows_no(rows_noSEXP);
    Rcpp::traits::input_parameter< int >::type cols_no(cols_noSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< std::string >::type corstr(corstrSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixgee_cpp_nokron(data, covariates, intercept, sample_size, rows_no, cols_no, max_iter, tol, corstr));
    return rcpp_result_gen;
END_RCPP
}
// get_pearson_residuals
arma::vec get_pearson_residuals(const char * family, const arma::vec& y_vector, const arma::vec& mu_vector, const arma::vec& weights_vector);
RcppExport SEXP _matrixgee_get_pearson_residuals(SEXP familySEXP, SEXP y_vectorSEXP, SEXP mu_vectorSEXP, SEXP weights_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_vector(y_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights_vector(weights_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pearson_residuals(family, y_vector, mu_vector, weights_vector));
    return rcpp_result_gen;
END_RCPP
}
// get_phi_hat
double get_phi_hat(const arma::vec& pearson_residuals_vector, const int& params_no);
RcppExport SEXP _matrixgee_get_phi_hat(SEXP pearson_residuals_vectorSEXP, SEXP params_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pearson_residuals_vector(pearson_residuals_vectorSEXP);
    Rcpp::traits::input_parameter< const int& >::type params_no(params_noSEXP);
    rcpp_result_gen = Rcpp::wrap(get_phi_hat(pearson_residuals_vector, params_no));
    return rcpp_result_gen;
END_RCPP
}
// alpha_hat_exchangeable
double alpha_hat_exchangeable(const arma::vec& pearson_residuals_vector, const arma::vec& id_vector, const double& phi, const int& params_no);
RcppExport SEXP _matrixgee_alpha_hat_exchangeable(SEXP pearson_residuals_vectorSEXP, SEXP id_vectorSEXP, SEXP phiSEXP, SEXP params_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pearson_residuals_vector(pearson_residuals_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const int& >::type params_no(params_noSEXP);
    rcpp_result_gen = Rcpp::wrap(alpha_hat_exchangeable(pearson_residuals_vector, id_vector, phi, params_no));
    return rcpp_result_gen;
END_RCPP
}
// alpha_hat_ar1
double alpha_hat_ar1(const arma::vec& pearson_residuals_vector, const arma::vec& id_vector, const arma::vec& repeated_vector, const double& phi, const int& params_no);
RcppExport SEXP _matrixgee_alpha_hat_ar1(SEXP pearson_residuals_vectorSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP phiSEXP, SEXP params_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pearson_residuals_vector(pearson_residuals_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const int& >::type params_no(params_noSEXP);
    rcpp_result_gen = Rcpp::wrap(alpha_hat_ar1(pearson_residuals_vector, id_vector, repeated_vector, phi, params_no));
    return rcpp_result_gen;
END_RCPP
}
// alpha_hat_unstructured
arma::vec alpha_hat_unstructured(const arma::vec& pearson_residuals_vector, const arma::vec& id_vector, const arma::vec& repeated_vector, const double& phi, const int& params_no);
RcppExport SEXP _matrixgee_alpha_hat_unstructured(SEXP pearson_residuals_vectorSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP phiSEXP, SEXP params_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pearson_residuals_vector(pearson_residuals_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const int& >::type params_no(params_noSEXP);
    rcpp_result_gen = Rcpp::wrap(alpha_hat_unstructured(pearson_residuals_vector, id_vector, repeated_vector, phi, params_no));
    return rcpp_result_gen;
END_RCPP
}
// alpha_hat_mdependent
arma::vec alpha_hat_mdependent(const arma::vec& pearson_residuals_vector, const arma::vec& id_vector, const arma::vec& repeated_vector, const double& phi, const int& params_no, const int& mdependence);
RcppExport SEXP _matrixgee_alpha_hat_mdependent(SEXP pearson_residuals_vectorSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP phiSEXP, SEXP params_noSEXP, SEXP mdependenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pearson_residuals_vector(pearson_residuals_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const int& >::type params_no(params_noSEXP);
    Rcpp::traits::input_parameter< const int& >::type mdependence(mdependenceSEXP);
    rcpp_result_gen = Rcpp::wrap(alpha_hat_mdependent(pearson_residuals_vector, id_vector, repeated_vector, phi, params_no, mdependence));
    return rcpp_result_gen;
END_RCPP
}
// alpha_hat_toeplitz
arma::vec alpha_hat_toeplitz(const arma::vec& pearson_residuals_vector, const arma::vec& id_vector, const arma::vec& repeated_vector, const double& phi, const int& params_no);
RcppExport SEXP _matrixgee_alpha_hat_toeplitz(SEXP pearson_residuals_vectorSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP phiSEXP, SEXP params_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pearson_residuals_vector(pearson_residuals_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const int& >::type params_no(params_noSEXP);
    rcpp_result_gen = Rcpp::wrap(alpha_hat_toeplitz(pearson_residuals_vector, id_vector, repeated_vector, phi, params_no));
    return rcpp_result_gen;
END_RCPP
}
// get_alpha_hat
arma::vec get_alpha_hat(const char * correlation_structure, const arma::vec& pearson_residuals_vector, const arma::vec& id_vector, const arma::vec& repeated_vector, const double& phi, const int& params_no, const int& mdependence);
RcppExport SEXP _matrixgee_get_alpha_hat(SEXP correlation_structureSEXP, SEXP pearson_residuals_vectorSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP phiSEXP, SEXP params_noSEXP, SEXP mdependenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type correlation_structure(correlation_structureSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pearson_residuals_vector(pearson_residuals_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const int& >::type params_no(params_noSEXP);
    Rcpp::traits::input_parameter< const int& >::type mdependence(mdependenceSEXP);
    rcpp_result_gen = Rcpp::wrap(get_alpha_hat(correlation_structure, pearson_residuals_vector, id_vector, repeated_vector, phi, params_no, mdependence));
    return rcpp_result_gen;
END_RCPP
}
// correlation_independence
arma::mat correlation_independence(const int& dimension);
RcppExport SEXP _matrixgee_correlation_independence(SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type dimension(dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation_independence(dimension));
    return rcpp_result_gen;
END_RCPP
}
// correlation_exchangeable
arma::mat correlation_exchangeable(const arma::vec& alpha_vector, const int& dimension);
RcppExport SEXP _matrixgee_correlation_exchangeable(SEXP alpha_vectorSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const int& >::type dimension(dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation_exchangeable(alpha_vector, dimension));
    return rcpp_result_gen;
END_RCPP
}
// correlation_ar1
arma::mat correlation_ar1(const arma::vec& alpha_vector, const int& dimension);
RcppExport SEXP _matrixgee_correlation_ar1(SEXP alpha_vectorSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const int& >::type dimension(dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation_ar1(alpha_vector, dimension));
    return rcpp_result_gen;
END_RCPP
}
// correlation_mdependent
arma::mat correlation_mdependent(const arma::vec& alpha_vector, const int& dimension);
RcppExport SEXP _matrixgee_correlation_mdependent(SEXP alpha_vectorSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const int& >::type dimension(dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation_mdependent(alpha_vector, dimension));
    return rcpp_result_gen;
END_RCPP
}
// correlation_toeplitz
arma::mat correlation_toeplitz(const arma::vec& alpha_vector);
RcppExport SEXP _matrixgee_correlation_toeplitz(SEXP alpha_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation_toeplitz(alpha_vector));
    return rcpp_result_gen;
END_RCPP
}
// correlation_unstructured
arma::mat correlation_unstructured(const arma::vec& alpha_vector, const int& dimension);
RcppExport SEXP _matrixgee_correlation_unstructured(SEXP alpha_vectorSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const int& >::type dimension(dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation_unstructured(alpha_vector, dimension));
    return rcpp_result_gen;
END_RCPP
}
// get_correlation_matrix
arma::mat get_correlation_matrix(const char * correlation_structure, const arma::vec& alpha_vector, const int& dimension);
RcppExport SEXP _matrixgee_get_correlation_matrix(SEXP correlation_structureSEXP, SEXP alpha_vectorSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type correlation_structure(correlation_structureSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const int& >::type dimension(dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(get_correlation_matrix(correlation_structure, alpha_vector, dimension));
    return rcpp_result_gen;
END_RCPP
}
// get_v_matrix_cc
arma::mat get_v_matrix_cc(const char * family, const arma::vec& mu_vector, const arma::vec& repeated_vector, const double& phi, const arma::mat& cor_matrix, const arma::vec& weights_vector);
RcppExport SEXP _matrixgee_get_v_matrix_cc(SEXP familySEXP, SEXP mu_vectorSEXP, SEXP repeated_vectorSEXP, SEXP phiSEXP, SEXP cor_matrixSEXP, SEXP weights_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type cor_matrix(cor_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights_vector(weights_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_v_matrix_cc(family, mu_vector, repeated_vector, phi, cor_matrix, weights_vector));
    return rcpp_result_gen;
END_RCPP
}
// residuals_dispersion_helper
List residuals_dispersion_helper(NumericVector model_residuals, int sample_size, int rows_no, int cols_no, int parameters_no);
RcppExport SEXP _matrixgee_residuals_dispersion_helper(SEXP model_residualsSEXP, SEXP sample_sizeSEXP, SEXP rows_noSEXP, SEXP cols_noSEXP, SEXP parameters_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type model_residuals(model_residualsSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rows_no(rows_noSEXP);
    Rcpp::traits::input_parameter< int >::type cols_no(cols_noSEXP);
    Rcpp::traits::input_parameter< int >::type parameters_no(parameters_noSEXP);
    rcpp_result_gen = Rcpp::wrap(residuals_dispersion_helper(model_residuals, sample_size, rows_no, cols_no, parameters_no));
    return rcpp_result_gen;
END_RCPP
}
// correlation_rows_calc_cpp
NumericMatrix correlation_rows_calc_cpp(NumericVector residuals, int sample_size, int rows_no, int cols_no, int parameters_no, std::string corstr_rows, double dispersion_parameter);
RcppExport SEXP _matrixgee_correlation_rows_calc_cpp(SEXP residualsSEXP, SEXP sample_sizeSEXP, SEXP rows_noSEXP, SEXP cols_noSEXP, SEXP parameters_noSEXP, SEXP corstr_rowsSEXP, SEXP dispersion_parameterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type rows_no(rows_noSEXP);
    Rcpp::traits::input_parameter< int >::type cols_no(cols_noSEXP);
    Rcpp::traits::input_parameter< int >::type parameters_no(parameters_noSEXP);
    Rcpp::traits::input_parameter< std::string >::type corstr_rows(corstr_rowsSEXP);
    Rcpp::traits::input_parameter< double >::type dispersion_parameter(dispersion_parameterSEXP);
    rcpp_result_gen = Rcpp::wrap(correlation_rows_calc_cpp(residuals, sample_size, rows_no, cols_no, parameters_no, corstr_rows, dispersion_parameter));
    return rcpp_result_gen;
END_RCPP
}
// estimating_equations_gee_cc
arma::vec estimating_equations_gee_cc(const arma::vec& y_vector, const arma::mat& model_matrix, const arma::vec& id_vector, const arma::vec& repeated_vector, const arma::vec& weights_vector, const char* link, const char* family, const arma::vec& beta_vector, const arma::vec& mu_vector, const arma::vec& eta_vector, const char * correlation_structure, const arma::vec& alpha_vector, const double& phi);
RcppExport SEXP _matrixgee_estimating_equations_gee_cc(SEXP y_vectorSEXP, SEXP model_matrixSEXP, SEXP id_vectorSEXP, SEXP repeated_vectorSEXP, SEXP weights_vectorSEXP, SEXP linkSEXP, SEXP familySEXP, SEXP beta_vectorSEXP, SEXP mu_vectorSEXP, SEXP eta_vectorSEXP, SEXP correlation_structureSEXP, SEXP alpha_vectorSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_vector(y_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type model_matrix(model_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type repeated_vector(repeated_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights_vector(weights_vectorSEXP);
    Rcpp::traits::input_parameter< const char* >::type link(linkSEXP);
    Rcpp::traits::input_parameter< const char* >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_vector(beta_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_vector(eta_vectorSEXP);
    Rcpp::traits::input_parameter< const char * >::type correlation_structure(correlation_structureSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_vector(alpha_vectorSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(estimating_equations_gee_cc(y_vector, model_matrix, id_vector, repeated_vector, weights_vector, link, family, beta_vector, mu_vector, eta_vector, correlation_structure, alpha_vector, phi));
    return rcpp_result_gen;
END_RCPP
}
// extract_upper_from_matrix
arma::vec extract_upper_from_matrix(const arma::mat& kronecker_matrix);
RcppExport SEXP _matrixgee_extract_upper_from_matrix(SEXP kronecker_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type kronecker_matrix(kronecker_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_upper_from_matrix(kronecker_matrix));
    return rcpp_result_gen;
END_RCPP
}
// subset_matrix
arma::mat subset_matrix(arma::mat x, arma::vec y);
RcppExport SEXP _matrixgee_subset_matrix(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(subset_matrix(x, y));
    return rcpp_result_gen;
END_RCPP
}
// kappa_matrix
arma::mat kappa_matrix(int dimension);
RcppExport SEXP _matrixgee_kappa_matrix(SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa_matrix(dimension));
    return rcpp_result_gen;
END_RCPP
}
// kronecker_left_identity_kappa
arma::mat kronecker_left_identity_kappa(arma::mat x);
RcppExport SEXP _matrixgee_kronecker_left_identity_kappa(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(kronecker_left_identity_kappa(x));
    return rcpp_result_gen;
END_RCPP
}
// kronecker_identity_right_kappa
arma::mat kronecker_identity_right_kappa(arma::mat x);
RcppExport SEXP _matrixgee_kronecker_identity_right_kappa(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(kronecker_identity_right_kappa(x));
    return rcpp_result_gen;
END_RCPP
}
// kappa_right
arma::mat kappa_right(arma::mat x);
RcppExport SEXP _matrixgee_kappa_right(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa_right(x));
    return rcpp_result_gen;
END_RCPP
}
// kronecker_sum_same
arma::mat kronecker_sum_same(arma::mat x);
RcppExport SEXP _matrixgee_kronecker_sum_same(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(kronecker_sum_same(x));
    return rcpp_result_gen;
END_RCPP
}
// kronecker_vector_identity
arma::mat kronecker_vector_identity(arma::vec x);
RcppExport SEXP _matrixgee_kronecker_vector_identity(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(kronecker_vector_identity(x));
    return rcpp_result_gen;
END_RCPP
}
// kronecker_vector_matrix
arma::mat kronecker_vector_matrix(arma::vec x, arma::mat y);
RcppExport SEXP _matrixgee_kronecker_vector_matrix(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(kronecker_vector_matrix(x, y));
    return rcpp_result_gen;
END_RCPP
}
// variance
arma::vec variance(const char * family, const arma::vec& mu_vector);
RcppExport SEXP _matrixgee_variance(SEXP familySEXP, SEXP mu_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(variance(family, mu_vector));
    return rcpp_result_gen;
END_RCPP
}
// variancemu
arma::vec variancemu(const char * family, const arma::vec& mu_vector);
RcppExport SEXP _matrixgee_variancemu(SEXP familySEXP, SEXP mu_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(variancemu(family, mu_vector));
    return rcpp_result_gen;
END_RCPP
}
// variancemu2
arma::vec variancemu2(const char * family, const arma::vec& mu_vector);
RcppExport SEXP _matrixgee_variancemu2(SEXP familySEXP, SEXP mu_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_vector(mu_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(variancemu2(family, mu_vector));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_matrixgee_ar1_cormatrix_formulated", (DL_FUNC) &_matrixgee_ar1_cormatrix_formulated, 2},
    {"_matrixgee_correlation_cols_calc_cpp", (DL_FUNC) &_matrixgee_correlation_cols_calc_cpp, 7},
    {"_matrixgee_correlation_cols_updated_cpp", (DL_FUNC) &_matrixgee_correlation_cols_updated_cpp, 7},
    {"_matrixgee_correlation_general", (DL_FUNC) &_matrixgee_correlation_general, 7},
    {"_matrixgee_correlation_general_updated", (DL_FUNC) &_matrixgee_correlation_general_updated, 7},
    {"_matrixgee_correlation_rows_updated_cpp", (DL_FUNC) &_matrixgee_correlation_rows_updated_cpp, 7},
    {"_matrixgee_get_covariance_matrices_cc", (DL_FUNC) &_matrixgee_get_covariance_matrices_cc, 12},
    {"_matrixgee_covariates_upd", (DL_FUNC) &_matrixgee_covariates_upd, 4},
    {"_matrixgee_update_beta_gee_cc", (DL_FUNC) &_matrixgee_update_beta_gee_cc, 13},
    {"_matrixgee_update_beta_naive_cc", (DL_FUNC) &_matrixgee_update_beta_naive_cc, 13},
    {"_matrixgee_update_beta_robust_cc", (DL_FUNC) &_matrixgee_update_beta_robust_cc, 13},
    {"_matrixgee_update_beta_empirical_cc", (DL_FUNC) &_matrixgee_update_beta_empirical_cc, 13},
    {"_matrixgee_update_beta_jeffreys_cc", (DL_FUNC) &_matrixgee_update_beta_jeffreys_cc, 14},
    {"_matrixgee_update_beta_cc", (DL_FUNC) &_matrixgee_update_beta_cc, 15},
    {"_matrixgee_fit_geesolver_cc", (DL_FUNC) &_matrixgee_fit_geesolver_cc, 22},
    {"_matrixgee_get_naive_matrix_inverse_independence", (DL_FUNC) &_matrixgee_get_naive_matrix_inverse_independence, 8},
    {"_matrixgee_get_gee_criteria_sc_cw", (DL_FUNC) &_matrixgee_get_gee_criteria_sc_cw, 9},
    {"_matrixgee_matrix_to_long_dataframe_cpp", (DL_FUNC) &_matrixgee_matrix_to_long_dataframe_cpp, 4},
    {"_matrixgee_vector_to_long_dataframe_cpp", (DL_FUNC) &_matrixgee_vector_to_long_dataframe_cpp, 4},
    {"_matrixgee_arma2vec", (DL_FUNC) &_matrixgee_arma2vec, 1},
    {"_matrixgee_vec2arma", (DL_FUNC) &_matrixgee_vec2arma, 1},
    {"_matrixgee_linkfun_rcpp", (DL_FUNC) &_matrixgee_linkfun_rcpp, 2},
    {"_matrixgee_linkfun", (DL_FUNC) &_matrixgee_linkfun, 2},
    {"_matrixgee_linkinv_rcpp", (DL_FUNC) &_matrixgee_linkinv_rcpp, 2},
    {"_matrixgee_linkinv", (DL_FUNC) &_matrixgee_linkinv, 2},
    {"_matrixgee_mueta_rcpp", (DL_FUNC) &_matrixgee_mueta_rcpp, 2},
    {"_matrixgee_mueta", (DL_FUNC) &_matrixgee_mueta, 2},
    {"_matrixgee_mueta2_rcpp", (DL_FUNC) &_matrixgee_mueta2_rcpp, 2},
    {"_matrixgee_mueta2", (DL_FUNC) &_matrixgee_mueta2, 2},
    {"_matrixgee_mueta3_rcpp", (DL_FUNC) &_matrixgee_mueta3_rcpp, 2},
    {"_matrixgee_mueta3", (DL_FUNC) &_matrixgee_mueta3, 2},
    {"_matrixgee_valideta", (DL_FUNC) &_matrixgee_valideta, 2},
    {"_matrixgee_validmu", (DL_FUNC) &_matrixgee_validmu, 2},
    {"_matrixgee_matrixgee_cpp", (DL_FUNC) &_matrixgee_matrixgee_cpp, 10},
    {"_matrixgee_matrixgee_cpp_nokron", (DL_FUNC) &_matrixgee_matrixgee_cpp_nokron, 9},
    {"_matrixgee_get_pearson_residuals", (DL_FUNC) &_matrixgee_get_pearson_residuals, 4},
    {"_matrixgee_get_phi_hat", (DL_FUNC) &_matrixgee_get_phi_hat, 2},
    {"_matrixgee_alpha_hat_exchangeable", (DL_FUNC) &_matrixgee_alpha_hat_exchangeable, 4},
    {"_matrixgee_alpha_hat_ar1", (DL_FUNC) &_matrixgee_alpha_hat_ar1, 5},
    {"_matrixgee_alpha_hat_unstructured", (DL_FUNC) &_matrixgee_alpha_hat_unstructured, 5},
    {"_matrixgee_alpha_hat_mdependent", (DL_FUNC) &_matrixgee_alpha_hat_mdependent, 6},
    {"_matrixgee_alpha_hat_toeplitz", (DL_FUNC) &_matrixgee_alpha_hat_toeplitz, 5},
    {"_matrixgee_get_alpha_hat", (DL_FUNC) &_matrixgee_get_alpha_hat, 7},
    {"_matrixgee_correlation_independence", (DL_FUNC) &_matrixgee_correlation_independence, 1},
    {"_matrixgee_correlation_exchangeable", (DL_FUNC) &_matrixgee_correlation_exchangeable, 2},
    {"_matrixgee_correlation_ar1", (DL_FUNC) &_matrixgee_correlation_ar1, 2},
    {"_matrixgee_correlation_mdependent", (DL_FUNC) &_matrixgee_correlation_mdependent, 2},
    {"_matrixgee_correlation_toeplitz", (DL_FUNC) &_matrixgee_correlation_toeplitz, 1},
    {"_matrixgee_correlation_unstructured", (DL_FUNC) &_matrixgee_correlation_unstructured, 2},
    {"_matrixgee_get_correlation_matrix", (DL_FUNC) &_matrixgee_get_correlation_matrix, 3},
    {"_matrixgee_get_v_matrix_cc", (DL_FUNC) &_matrixgee_get_v_matrix_cc, 6},
    {"_matrixgee_residuals_dispersion_helper", (DL_FUNC) &_matrixgee_residuals_dispersion_helper, 5},
    {"_matrixgee_correlation_rows_calc_cpp", (DL_FUNC) &_matrixgee_correlation_rows_calc_cpp, 7},
    {"_matrixgee_estimating_equations_gee_cc", (DL_FUNC) &_matrixgee_estimating_equations_gee_cc, 13},
    {"_matrixgee_extract_upper_from_matrix", (DL_FUNC) &_matrixgee_extract_upper_from_matrix, 1},
    {"_matrixgee_subset_matrix", (DL_FUNC) &_matrixgee_subset_matrix, 2},
    {"_matrixgee_kappa_matrix", (DL_FUNC) &_matrixgee_kappa_matrix, 1},
    {"_matrixgee_kronecker_left_identity_kappa", (DL_FUNC) &_matrixgee_kronecker_left_identity_kappa, 1},
    {"_matrixgee_kronecker_identity_right_kappa", (DL_FUNC) &_matrixgee_kronecker_identity_right_kappa, 1},
    {"_matrixgee_kappa_right", (DL_FUNC) &_matrixgee_kappa_right, 1},
    {"_matrixgee_kronecker_sum_same", (DL_FUNC) &_matrixgee_kronecker_sum_same, 1},
    {"_matrixgee_kronecker_vector_identity", (DL_FUNC) &_matrixgee_kronecker_vector_identity, 1},
    {"_matrixgee_kronecker_vector_matrix", (DL_FUNC) &_matrixgee_kronecker_vector_matrix, 2},
    {"_matrixgee_variance", (DL_FUNC) &_matrixgee_variance, 2},
    {"_matrixgee_variancemu", (DL_FUNC) &_matrixgee_variancemu, 2},
    {"_matrixgee_variancemu2", (DL_FUNC) &_matrixgee_variancemu2, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_matrixgee(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
